package com.vulnerability;

import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.TimeZone;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class  MainController {

  private static final Logger logger = LogManager.getLogger(MainController.class.getName());

  @GetMapping("/currentDateTime")
  public ResponseEntity<String> getCurrentDateTime(@RequestHeader(value = "Time-Zone" , defaultValue = "UTC") String tz) {
    ThreadContext.put("timezone", tz);

     try {
       logger.info("Request received");

       // Validate input
       boolean timeZoneFound = Arrays.stream(TimeZone.getAvailableIDs()).anyMatch(avialableZones -> avialableZones.contains(tz));
       if (!timeZoneFound) {
         logger.error("Invalid timezone provided");
         return ResponseEntity.badRequest().body("Invalid timezone provided");
       }
        LocalDateTime date = LocalDateTime.now(ZoneId.of(tz));
        logger.info("Request processed successfully");
        return ResponseEntity.ok(date.toString());
     } catch (DateTimeException e) {
        logger.error("Error occurred : " + Arrays.toString(e.getStackTrace()));
        return ResponseEntity.internalServerError().body(e.getMessage());
    }
  }
}
